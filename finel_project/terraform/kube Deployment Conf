# k8s/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: guest-list-api
  labels:
    name: guest-list-api

---
# k8s/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: guest-list-api-service-account
  namespace: guest-list-api
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/guest-list-api-app-service-account-role"

---
# k8s/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: guest-list-api
type: Opaque
stringData:
  DATABASE_URL: "postgresql://USERNAME:PASSWORD@RDS_ENDPOINT:5432/guestlistdb"

---
# k8s/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: guest-list-api
data:
  PORT: "3000"
  NODE_ENV: "production"
  LOG_LEVEL: "info"

---
# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: guest-list-api
  namespace: guest-list-api
  labels:
    app: guest-list-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: guest-list-api
  template:
    metadata:
      labels:
        app: guest-list-api
    spec:
      serviceAccountName: guest-list-api-service-account
      containers:
      - name: guest-list-api
        image: YOUR_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/guest-list-api:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PORT
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: DATABASE_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
